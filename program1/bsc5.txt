# Setup
c-->from imp import reload
c-->import synonyms
c-->reload(synonyms)
c-->sy = synonyms # abbreviation
# Test build_semantic_dictionary
c-->import math
c-->import pickle
c-->s1 = sy.build_semantic_dictionary([open('trivial.txt', encoding='cp1252')],open('ignore_trivial.txt', encoding='cp1252'))
==-->s1-->{'i': {'went': 1, 'gym': 1, 'this': 1, 'morning': 2, 'later': 1, 'rested': 1, 'was': 1, 'tired': 1}, 'went': {'i': 1, 'gym': 1, 'this': 1, 'morning': 1}, 'gym': {'i': 1, 'went': 1, 'this': 1, 'morning': 1}, 'this': {'i': 1, 'went': 1, 'gym': 1, 'morning': 1}, 'morning': {'i': 2, 'went': 1, 'gym': 1, 'this': 1, 'later': 1, 'rested': 1}, 'later': {'morning': 1, 'i': 1, 'rested': 1}, 'rested': {'later': 1, 'morning': 1, 'i': 1}, 'was': {'i': 1, 'tired': 1}, 'tired': {'i': 1, 'was': 1}}
c-->s2 = sy.build_semantic_dictionary([open('simple1.txt', encoding='cp1252'),open('simple2.txt', encoding='cp1252')],open('ignore_words.txt', encoding='cp1252'))
==-->s2-->pickle.load(open('pickle_simple12.pkl','rb'))
c-->s3 = sy.build_semantic_dictionary([open('bible.txt', encoding='cp1252'), open('war_and_peace.txt', encoding='cp1252')], open('ignore_words.txt', encoding='cp1252'))
==-->s3-->pickle.load(open('pickle_bw.pkl','rb'))

# Test dict_as_str
c-->s1 = {'i': {'went': 1, 'gym': 1, 'this': 1, 'morning': 2, 'later': 1, 'rested': 1, 'was': 1, 'tired': 1}, 'went': {'i': 1, 'gym': 1, 'this': 1, 'morning': 1}, 'gym': {'i': 1, 'went': 1, 'this': 1, 'morning': 1}, 'this': {'i': 1, 'went': 1, 'gym': 1, 'morning': 1}, 'morning': {'i': 2, 'went': 1, 'gym': 1, 'this': 1, 'later': 1, 'rested': 1}, 'later': {'morning': 1, 'i': 1, 'rested': 1}, 'rested': {'later': 1, 'morning': 1, 'i': 1}, 'was': {'i': 1, 'tired': 1}, 'tired': {'i': 1, 'was': 1}}
e-->repr(sy.dict_as_str(s1))-->'  context for gym = i@1, morning@1, this@1, went@1\n  context for i = gym@1, later@1, morning@2, rested@1, this@1, tired@1, was@1, went@1\n  context for later = i@1, morning@1, rested@1\n  context for morning = gym@1, i@2, later@1, rested@1, this@1, went@1\n  context for rested = i@1, later@1, morning@1\n  context for this = gym@1, i@1, morning@1, went@1\n  context for tired = i@1, was@1\n  context for was = i@1, tired@1\n  context for went = gym@1, i@1, morning@1, this@1\n  min/max context lengths = 2/8\n'
c-->s2 = pickle.load(open('pickle_simple12.pkl','rb'))
==-->repr(sy.dict_as_str(s2))-->repr(open('simple12_dict_as_str.txt').read())

# Load main semantic dictionary
c-->s1 = pickle.load(open('pickle_abdsw.pkl','rb'))

# Test cosine_metric
c-->cd1 = {'a':1, 'b':2, 'c':3}
c-->cd2 = {'a':5, 'c':7, 'd':8}
c-->print('      Computed cosine_metric 1:',sy.cosine_metric(cd1,cd2))
e-->math.isclose(sy.cosine_metric(cd1,cd2),0.5915204817512771,abs_tol=.00001)-->True
c-->print('      Computed cosine_metric 2:',sy.cosine_metric(s1['trip'],s1['journey']))
e-->math.isclose(sy.cosine_metric(s1['trip'],s1['journey']),0.3271784982057967,abs_tol=.00001)-->True
c-->print('      Computed cosine_metric 3:',sy.cosine_metric(s1['trip'],s1['party']))
e-->math.isclose(sy.cosine_metric(s1['trip'],s1['party']),0.22754839444062305,abs_tol=.00001)-->True
c-->print('      Computed cosine_metric 4:',sy.cosine_metric(s1['trip'],s1['dog']))
e-->math.isclose(sy.cosine_metric(s1['trip'],s1['dog']),.2525648202303373,abs_tol=.00001)-->True
c-->print('      Computed cosine_metric 5:',sy.cosine_metric(s1['study'],s1['examine']))
e-->math.isclose(sy.cosine_metric(s1['study'],s1['examine']),0.34803224310491343,abs_tol=.00001)-->True
c-->print('      Computed cosine_metric 6:',sy.cosine_metric(s1['study'],s1['waste']))
e-->math.isclose(sy.cosine_metric(s1['study'],s1['waste']),0.21896669739696592,abs_tol=.00001)-->True
^-->sy.cosine_metric(s1['study'],{})-->ZeroDivisionError
^-->sy.cosine_metric({},s1['examine'])-->ZeroDivisionError

# Test most_similar
e-->sy.most_similar('trip',['journey','party','dog'],s1,sy.cosine_metric)-->journey
e-->sy.most_similar('trip',['party','journey','dog'],s1,sy.cosine_metric)-->journey
e-->sy.most_similar('trip',['party','dog','journey'],s1,sy.cosine_metric)-->journey
e-->sy.most_similar('study',['examine','waste'],s1,sy.cosine_metric)-->examine
e-->sy.most_similar('study',['waste','examine'],s1,sy.cosine_metric)-->examine

# Test similarity_test
==-->repr(sy.similarity_test(open('synonym_problems1.txt'),s1,sy.cosine_metric))-->'"  Correct: \'trip\' is most like \'journey\' from [\'party\', \'journey\', \'dog\']\\n  Correct: \'study\' is most like \'examine\' from [\'waste\', \'examine\']\\n  Incorrect: \'strike\' is most like \'beat\', not \'complain\' from [\'beat\', \'complain\']\\n  Metric failure: could not choose synonym for \'bring\' from [\'fetch\', \'irvine\', \'develop\']\\n50.0% correct\\n"'
==-->repr(sy.similarity_test(open('synonym_problems.txt'),s1,sy.cosine_metric))-->'"  Incorrect: \'draw\' is most like \'paint\', not \'walk\' from [\'walk\', \'paint\']\\n  Incorrect: \'duty\' is most like \'task\', not \'example\' from [\'task\', \'example\']\\n  Incorrect: \'earnest\' is most like \'serious\', not \'amusing\' from [\'serious\', \'amusing\']\\n  Correct: \'picture\' is most like \'painting\' from [\'painting\', \'chair\']\\n  Correct: \'vexed\' is most like \'annoyed\' from [\'amused\', \'annoyed\']\\n  Correct: \'watch\' is most like \'see\' from [\'hear\', \'see\']\\n  Correct: \'tidy\' is most like \'clean\' from [\'mess\', \'clean\']\\n  Correct: \'youthful\' is most like \'young\' from [\'young\', \'complex\']\\n  Incorrect: \'strike\' is most like \'beat\', not \'complain\' from [\'beat\', \'complain\']\\n  Correct: \'tearful\' is most like \'crying\' from [\'frowning\', \'crying\']\\n  Correct: \'lonely\' is most like \'alone\' from [\'alone\', \'together\']\\n  Incorrect: \'ardent\' is most like \'keen\', not \'wise\' from [\'keen\', \'wise\']\\n  Correct: \'thief\' is most like \'robber\' from [\'robber\', \'postman\']\\n  Correct: \'authentic\' is most like \'genuine\' from [\'genuine\', \'false\']\\n  Correct: \'trip\' is most like \'journey\' from [\'party\', \'journey\']\\n  Correct: \'stroll\' is most like \'walk\' from [\'walk\', \'destroy\']\\n  Correct: \'speak\' is most like \'talk\' from [\'talk\', \'crawl\']\\n  Correct: \'begin\' is most like \'start\' from [\'sit\', \'start\']\\n  Correct: \'voyage\' is most like \'journey\' from [\'dog\', \'journey\']\\n  Correct: \'stone\' is most like \'rock\' from [\'rock\', \'chair\']\\n  Incorrect: \'detest\' is most like \'hate\', not \'regard\' from [\'regard\', \'hate\']\\n  Correct: \'genuine\' is most like \'real\' from [\'real\', \'interesting\']\\n  Correct: \'bring\' is most like \'fetch\' from [\'fetch\', \'develop\']\\n  Incorrect: \'shout\' is most like \'yell\', not \'smell\' from [\'smell\', \'yell\']\\n  Incorrect: \'ruin\' is most like \'destroy\', not \'dare\' from [\'destroy\', \'dare\']\\n  Incorrect: \'leap\' is most like \'jump\', not \'sit\' from [\'sit\', \'jump\']\\n  Correct: \'evade\' is most like \'avoid\' from [\'explore\', \'avoid\']\\n  Incorrect: \'infringe\' is most like \'violate\', not \'walk\' from [\'walk\', \'violate\']\\n  Incorrect: \'charge\' is most like \'accusation\', not \'admission\' from [\'accusation\', \'admission\']\\n  Correct: \'ruddy\' is most like \'wrinkled\' from [\'reddish\', \'wrinkled\']\\n  Correct: \'threat\' is most like \'danger\' from [\'greeting\', \'danger\']\\n  Correct: \'error\' is most like \'mistake\' from [\'mistake\', \'robber\']\\n  Correct: \'toil\' is most like \'work\' from [\'jump\', \'work\']\\n  Correct: \'serene\' is most like \'quiet\' from [\'exciting\', \'quiet\']\\n  Correct: \'study\' is most like \'examine\' from [\'waste\', \'examine\']\\n  Correct: \'road\' is most like \'path\' from [\'path\', \'tree\']\\n  Correct: \'mean\' is most like \'cruel\' from [\'boring\', \'cruel\']\\n  Correct: \'honest\' is most like \'fair\' from [\'unfriendly\', \'fair\']\\n  Correct: \'wealthy\' is most like \'rich\' from [\'rich\', \'content\']\\n  Correct: \'genuine\' is most like \'true\' from [\'green\', \'true\']\\n72.5% correct\\n"'