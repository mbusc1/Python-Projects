# Setup
c-->from imp import reload
c-->import fraction
c-->reload(fraction)
c-->from fraction import Fraction as Frac
# Test __init__
c-->f = Frac(0,5)
e-->f.num-->0
e-->f.denom-->1
c-->f = Frac(1,-2)
e-->f.num-->-1
e-->f.denom-->2
c-->f = Frac(-1,-2)
e-->f.num-->1
e-->f.denom-->2
c-->f = Frac(2,6)
e-->f.num-->1
e-->f.denom-->3
c-->f = Frac(2,-6)
e-->f.num-->-1
e-->f.denom-->3
^-->f = Frac(1.,0)-->AssertionError
^-->f = Frac(0,1.)-->AssertionError
# __repr__, __str__
c-->a = Frac(0,5)
c-->b = Frac(1,-2)
c-->f = Frac(2,6)
e-->repr(a)-->Fraction(0,1)
e-->repr(b)-->Fraction(-1,2)
e-->repr(f)-->Fraction(1,3)
e-->str(a)-->0/1
e-->str(b)-->-1/2
e-->str(f)-->1/3
# __bool__
e-->True if Frac(1,2) else False-->True
e-->True if Frac(0,2) else False-->False
# __getitem__
c-->f = Frac(1,2)
e-->f[0]-->1
e-->f['n']-->1
e-->f['nume']-->1
e-->f['numerator']-->1
e-->f[1]-->2
e-->f['d']-->2
e-->f['denom']-->2
e-->f['denominator']-->2
^-->f[-1]-->TypeError
^-->f['x']-->TypeError
# Unary arithmetic operators, abs
c-->a = Frac(1,3)
c-->b = Frac(-1,3)
e-->+a-->1/3
e-->abs(a)-->1/3
e-->-a-->-1/3
e-->+b-->-1/3
e-->-b-->1/3
e-->abs(b)-->1/3
c-->a = Frac(-1,3)
c-->b = a
e-->b is -a-->False
e-->b is +a-->False
e-->b is abs(a)-->False
# __add__/__radd__
c-->f = Frac(1,2)
e-->f+Frac(1,3)-->5/6
e-->f+2-->5/2
e-->Frac(1,3)+f-->5/6
e-->2+f-->5/2
e-->f.num-->1
e-->f.denom-->2
^-->f+1.-->TypeError
^-->1.+f-->TypeError
# __sub__/__rsub__
e-->f-Frac(1,3)-->1/6
e-->f-2-->-3/2
e-->Frac(1,3)-f-->-1/6
e-->2-f-->3/2
e-->f.num-->1
e-->f.denom-->2
^-->f-1.-->TypeError
^-->1.-f-->TypeError
# __mul__/__rmul__
e-->f*Frac(1,3)-->1/6
e-->f*3-->3/2
e-->Frac(1,3)*f-->1/6
e-->3*f-->3/2
e-->Frac(5,3)*f-->5/6
e-->f.num-->1
e-->f.denom-->2
^-->f*1.-->TypeError
^-->1.*f-->TypeError
# __truediv__/__rtruediv__
e-->Frac(1,3)/f-->2/3
e-->3/f-->6/1
e-->Frac(1,3)/3-->1/9
e-->3/Frac(1,3)-->9/1
e-->Frac(1,3)/f-->2/3
e-->f.num-->1
e-->f.denom-->2
^-->f/1.-->TypeError
^-->1./f-->TypeError
# __pow__
e-->f**10-->1/1024
e-->Frac(2,1)**-10-->1/1024
e-->f.num-->1
e-->f.denom-->2
^-->f**3.-->TypeError
^-->f**'3'-->TypeError
# Compute pi (lots of arithmetic calculation)
e-->fraction.compute_pi(5)-->951195037/302776320
e-->fraction.compute_pi(20)-->309516439544912724470574680406138530563/98522142643553374931479190068160102400
e-->fraction.compute_pi(50)(50)-->3.14159265358979323846264338327950228625461732116543
#  ==
c-->f = Frac(1,2)
c-->a = Frac(1,3)
e-->a==f-->False
e-->f==a-->False
e-->f==2-->False
e-->2==f-->False
^-->a==1.-->TypeError
^-->1.==a-->TypeError
#  !=
e-->a!=f-->True
e-->f!=a-->True
e-->f!=2-->True
e-->2!=f-->True
^-->a!=1.-->TypeError
^-->1.!=a-->TypeError
#  <
e-->a<f-->True
e-->f<a-->False
e-->f<2-->True
e-->f<2-->True
^-->a<1.-->TypeError
^-->1.<a-->TypeError
#  >
e-->a>f-->False
e-->f>a-->True
e-->2<f-->False
e-->2>f-->True
^-->a>1.-->TypeError
^-->1.>a-->TypeError
e-->abs(Frac(1,2))-->1/2
e-->abs(Frac(-1,2))-->1/2
# __setattr__ (assuming instance variables are named num and denom)
^-->f.num = 1-->NameError
c-->f.x = 1
